"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@bkrem";
exports.ids = ["vendor-chunks/@bkrem"];
exports.modules = {

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroup.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/CSSTransitionGroup.js ***!
  \**************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _TransitionGroup = __webpack_require__(/*! ./TransitionGroup */ \"(ssr)/./node_modules/@bkrem/react-transition-group/TransitionGroup.js\");\nvar _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);\nvar _CSSTransitionGroupChild = __webpack_require__(/*! ./CSSTransitionGroupChild */ \"(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroupChild.js\");\nvar _CSSTransitionGroupChild2 = _interopRequireDefault(_CSSTransitionGroupChild);\nvar _PropTypes = __webpack_require__(/*! ./utils/PropTypes */ \"(ssr)/./node_modules/@bkrem/react-transition-group/utils/PropTypes.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar propTypes = {\n    transitionName: _PropTypes.nameShape.isRequired,\n    transitionAppear: _propTypes2.default.bool,\n    transitionEnter: _propTypes2.default.bool,\n    transitionLeave: _propTypes2.default.bool,\n    transitionAppearTimeout: (0, _PropTypes.transitionTimeout)(\"Appear\"),\n    transitionEnterTimeout: (0, _PropTypes.transitionTimeout)(\"Enter\"),\n    transitionLeaveTimeout: (0, _PropTypes.transitionTimeout)(\"Leave\")\n};\nvar defaultProps = {\n    transitionAppear: false,\n    transitionEnter: true,\n    transitionLeave: true\n};\nvar CSSTransitionGroup = function(_React$Component) {\n    _inherits(CSSTransitionGroup, _React$Component);\n    function CSSTransitionGroup() {\n        var _temp, _this, _ret;\n        _classCallCheck(this, CSSTransitionGroup);\n        for(var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [\n            this\n        ].concat(args))), _this), _this._wrapChild = function(child) {\n            return _react2.default.createElement(_CSSTransitionGroupChild2.default, {\n                name: _this.props.transitionName,\n                appear: _this.props.transitionAppear,\n                enter: _this.props.transitionEnter,\n                leave: _this.props.transitionLeave,\n                appearTimeout: _this.props.transitionAppearTimeout,\n                enterTimeout: _this.props.transitionEnterTimeout,\n                leaveTimeout: _this.props.transitionLeaveTimeout\n            }, child);\n        }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n    // We need to provide this childFactory so that\n    // ReactCSSTransitionGroupChild can receive updates to name, enter, and\n    // leave while it is leaving.\n    CSSTransitionGroup.prototype.render = function render() {\n        return _react2.default.createElement(_TransitionGroup2.default, _extends({}, this.props, {\n            childFactory: this._wrapChild\n        }));\n    };\n    return CSSTransitionGroup;\n}(_react2.default.Component);\nCSSTransitionGroup.displayName = \"CSSTransitionGroup\";\nCSSTransitionGroup.propTypes =  true ? propTypes : 0;\nCSSTransitionGroup.defaultProps = defaultProps;\nexports[\"default\"] = CSSTransitionGroup;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroupChild.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/CSSTransitionGroupChild.js ***!
  \*******************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _addClass = __webpack_require__(/*! dom-helpers/class/addClass */ \"(ssr)/./node_modules/dom-helpers/class/addClass.js\");\nvar _addClass2 = _interopRequireDefault(_addClass);\nvar _removeClass = __webpack_require__(/*! dom-helpers/class/removeClass */ \"(ssr)/./node_modules/dom-helpers/class/removeClass.js\");\nvar _removeClass2 = _interopRequireDefault(_removeClass);\nvar _requestAnimationFrame = __webpack_require__(/*! dom-helpers/util/requestAnimationFrame */ \"(ssr)/./node_modules/dom-helpers/util/requestAnimationFrame.js\");\nvar _requestAnimationFrame2 = _interopRequireDefault(_requestAnimationFrame);\nvar _properties = __webpack_require__(/*! dom-helpers/transition/properties */ \"(ssr)/./node_modules/dom-helpers/transition/properties.js\");\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _reactDom = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\nvar _PropTypes = __webpack_require__(/*! ./utils/PropTypes */ \"(ssr)/./node_modules/@bkrem/react-transition-group/utils/PropTypes.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar events = [];\nif (_properties.transitionEnd) events.push(_properties.transitionEnd);\nif (_properties.animationEnd) events.push(_properties.animationEnd);\nfunction addEndListener(node, listener) {\n    if (events.length) {\n        events.forEach(function(e) {\n            return node.addEventListener(e, listener, false);\n        });\n    } else {\n        setTimeout(listener, 0);\n    }\n    return function() {\n        if (!events.length) return;\n        events.forEach(function(e) {\n            return node.removeEventListener(e, listener, false);\n        });\n    };\n}\nvar propTypes = {\n    children: _propTypes2.default.node,\n    name: _PropTypes.nameShape.isRequired,\n    // Once we require timeouts to be specified, we can remove the\n    // boolean flags (appear etc.) and just accept a number\n    // or a bool for the timeout flags (appearTimeout etc.)\n    appear: _propTypes2.default.bool,\n    enter: _propTypes2.default.bool,\n    leave: _propTypes2.default.bool,\n    appearTimeout: _propTypes2.default.number,\n    enterTimeout: _propTypes2.default.number,\n    leaveTimeout: _propTypes2.default.number\n};\nvar CSSTransitionGroupChild = function(_React$Component) {\n    _inherits(CSSTransitionGroupChild, _React$Component);\n    function CSSTransitionGroupChild(props, context) {\n        _classCallCheck(this, CSSTransitionGroupChild);\n        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n        _this.componentWillAppear = function(done) {\n            if (_this.props.appear) {\n                _this.transition(\"appear\", done, _this.props.appearTimeout);\n            } else {\n                done();\n            }\n        };\n        _this.componentWillEnter = function(done) {\n            if (_this.props.enter) {\n                _this.transition(\"enter\", done, _this.props.enterTimeout);\n            } else {\n                done();\n            }\n        };\n        _this.componentWillLeave = function(done) {\n            if (_this.props.leave) {\n                _this.transition(\"leave\", done, _this.props.leaveTimeout);\n            } else {\n                done();\n            }\n        };\n        _this.classNameAndNodeQueue = [];\n        _this.transitionTimeouts = [];\n        return _this;\n    }\n    CSSTransitionGroupChild.prototype.componentWillUnmount = function componentWillUnmount() {\n        this.unmounted = true;\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.transitionTimeouts.forEach(function(timeout) {\n            clearTimeout(timeout);\n        });\n        this.classNameAndNodeQueue.length = 0;\n    };\n    CSSTransitionGroupChild.prototype.transition = function transition(animationType, finishCallback, timeout) {\n        var node = (0, _reactDom.findDOMNode)(this);\n        if (!node) {\n            if (finishCallback) {\n                finishCallback();\n            }\n            return;\n        }\n        var className = this.props.name[animationType] || this.props.name + \"-\" + animationType;\n        var activeClassName = this.props.name[animationType + \"Active\"] || className + \"-active\";\n        var timer = null;\n        var removeListeners = void 0;\n        (0, _addClass2.default)(node, className);\n        // Need to do this to actually trigger a transition.\n        this.queueClassAndNode(activeClassName, node);\n        // Clean-up the animation after the specified delay\n        var finish = function finish(e) {\n            if (e && e.target !== node) {\n                return;\n            }\n            clearTimeout(timer);\n            if (removeListeners) removeListeners();\n            (0, _removeClass2.default)(node, className);\n            (0, _removeClass2.default)(node, activeClassName);\n            if (removeListeners) removeListeners();\n            // Usually this optional callback is used for informing an owner of\n            // a leave animation and telling it to remove the child.\n            if (finishCallback) {\n                finishCallback();\n            }\n        };\n        if (timeout) {\n            timer = setTimeout(finish, timeout);\n            this.transitionTimeouts.push(timer);\n        } else if (_properties.transitionEnd) {\n            removeListeners = addEndListener(node, finish);\n        }\n    };\n    CSSTransitionGroupChild.prototype.queueClassAndNode = function queueClassAndNode(className, node) {\n        var _this2 = this;\n        this.classNameAndNodeQueue.push({\n            className: className,\n            node: node\n        });\n        if (!this.rafHandle) {\n            this.rafHandle = (0, _requestAnimationFrame2.default)(function() {\n                return _this2.flushClassNameAndNodeQueue();\n            });\n        }\n    };\n    CSSTransitionGroupChild.prototype.flushClassNameAndNodeQueue = function flushClassNameAndNodeQueue() {\n        if (!this.unmounted) {\n            this.classNameAndNodeQueue.forEach(function(obj) {\n                // This is for to force a repaint,\n                // which is necessary in order to transition styles when adding a class name.\n                /* eslint-disable no-unused-expressions */ obj.node.scrollTop;\n                /* eslint-enable no-unused-expressions */ (0, _addClass2.default)(obj.node, obj.className);\n            });\n        }\n        this.classNameAndNodeQueue.length = 0;\n        this.rafHandle = null;\n    };\n    CSSTransitionGroupChild.prototype.render = function render() {\n        var props = _extends({}, this.props);\n        delete props.name;\n        delete props.appear;\n        delete props.enter;\n        delete props.leave;\n        delete props.appearTimeout;\n        delete props.enterTimeout;\n        delete props.leaveTimeout;\n        delete props.children;\n        return _react2.default.cloneElement(_react2.default.Children.only(this.props.children), props);\n    };\n    return CSSTransitionGroupChild;\n}(_react2.default.Component);\nCSSTransitionGroupChild.displayName = \"CSSTransitionGroupChild\";\nCSSTransitionGroupChild.propTypes =  true ? propTypes : 0;\nexports[\"default\"] = CSSTransitionGroupChild;\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroupChild.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/TransitionGroup.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/TransitionGroup.js ***!
  \***********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nvar _extends = Object.assign || function(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i];\n        for(var key in source){\n            if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n            }\n        }\n    }\n    return target;\n};\nvar _chainFunction = __webpack_require__(/*! chain-function */ \"(ssr)/./node_modules/chain-function/index.js\");\nvar _chainFunction2 = _interopRequireDefault(_chainFunction);\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _warning = __webpack_require__(/*! warning */ \"(ssr)/./node_modules/warning/warning.js\");\nvar _warning2 = _interopRequireDefault(_warning);\nvar _reactLifecyclesCompat = __webpack_require__(/*! react-lifecycles-compat */ \"(ssr)/./node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js\");\nvar _ChildMapping = __webpack_require__(/*! ./utils/ChildMapping */ \"(ssr)/./node_modules/@bkrem/react-transition-group/utils/ChildMapping.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _possibleConstructorReturn(self, call) {\n    if (!self) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar propTypes = {\n    component: _propTypes2.default.any,\n    childFactory: _propTypes2.default.func,\n    children: _propTypes2.default.node\n};\nvar defaultProps = {\n    component: \"span\",\n    childFactory: function childFactory(child) {\n        return child;\n    }\n};\nvar TransitionGroup = function(_React$Component) {\n    _inherits(TransitionGroup, _React$Component);\n    function TransitionGroup(props, context) {\n        _classCallCheck(this, TransitionGroup);\n        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));\n        _this.performAppear = function(key, component) {\n            _this.currentlyTransitioningKeys[key] = true;\n            if (component.componentWillAppear) {\n                component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));\n            } else {\n                _this._handleDoneAppearing(key, component);\n            }\n        };\n        _this._handleDoneAppearing = function(key, component) {\n            if (component && component.componentDidAppear) {\n                component.componentDidAppear();\n            }\n            delete _this.currentlyTransitioningKeys[key];\n            var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);\n            if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n                // This was removed before it had fully appeared. Remove it.\n                _this.performLeave(key, component);\n            }\n        };\n        _this.performEnter = function(key, component) {\n            _this.currentlyTransitioningKeys[key] = true;\n            if (component.componentWillEnter) {\n                component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));\n            } else {\n                _this._handleDoneEntering(key, component);\n            }\n        };\n        _this._handleDoneEntering = function(key, component) {\n            if (component && component.componentDidEnter) {\n                component.componentDidEnter();\n            }\n            delete _this.currentlyTransitioningKeys[key];\n            var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);\n            if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {\n                // This was removed before it had fully entered. Remove it.\n                _this.performLeave(key, component);\n            }\n        };\n        _this.performLeave = function(key, component) {\n            _this.currentlyTransitioningKeys[key] = true;\n            if (component && component.componentWillLeave) {\n                component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));\n            } else {\n                // Note that this is somewhat dangerous b/c it calls setState()\n                // again, effectively mutating the component before all the work\n                // is done.\n                _this._handleDoneLeaving(key, component);\n            }\n        };\n        _this._handleDoneLeaving = function(key, component) {\n            if (component && component.componentDidLeave) {\n                component.componentDidLeave();\n            }\n            delete _this.currentlyTransitioningKeys[key];\n            var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);\n            if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {\n                // This entered again before it fully left. Add it again.\n                _this.keysToEnter.push(key);\n            } else {\n                _this.setState(function(state) {\n                    var newChildren = _extends({}, state.children);\n                    delete newChildren[key];\n                    return {\n                        children: newChildren\n                    };\n                });\n            }\n        };\n        _this.childRefs = Object.create(null);\n        _this.currentlyTransitioningKeys = {};\n        _this.keysToEnter = [];\n        _this.keysToLeave = [];\n        _this.state = {\n            children: (0, _ChildMapping.getChildMapping)(props.children)\n        };\n        return _this;\n    }\n    TransitionGroup.prototype.componentDidMount = function componentDidMount() {\n        var initialChildMapping = this.state.children;\n        for(var key in initialChildMapping){\n            if (initialChildMapping[key]) {\n                this.performAppear(key, this.childRefs[key]);\n            }\n        }\n    };\n    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n        var nextChildMapping = (0, _ChildMapping.getChildMapping)(props.children);\n        var prevChildMapping = state.children;\n        return {\n            children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)\n        };\n    };\n    TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n        var _this2 = this;\n        var nextChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);\n        var prevChildMapping = prevState.children;\n        for(var key in nextChildMapping){\n            var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);\n            if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {\n                this.keysToEnter.push(key);\n            }\n        }\n        for(var _key in prevChildMapping){\n            var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);\n            if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {\n                this.keysToLeave.push(_key);\n            }\n        }\n        // If we want to someday check for reordering, we could do it here.\n        var keysToEnter = this.keysToEnter;\n        this.keysToEnter = [];\n        keysToEnter.forEach(function(key) {\n            return _this2.performEnter(key, _this2.childRefs[key]);\n        });\n        var keysToLeave = this.keysToLeave;\n        this.keysToLeave = [];\n        keysToLeave.forEach(function(key) {\n            return _this2.performLeave(key, _this2.childRefs[key]);\n        });\n    };\n    TransitionGroup.prototype.render = function render() {\n        var _this3 = this;\n        // TODO: we could get rid of the need for the wrapper node\n        // by cloning a single child\n        var childrenToRender = [];\n        var _loop = function _loop(key) {\n            var child = _this3.state.children[key];\n            if (child) {\n                var isCallbackRef = typeof child.ref !== \"string\";\n                var factoryChild = _this3.props.childFactory(child);\n                var ref = function ref(r) {\n                    _this3.childRefs[key] = r;\n                };\n                 true ? (0, _warning2.default)(isCallbackRef, \"string refs are not supported on children of TransitionGroup and will be ignored. \" + \"Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute\") : 0;\n                // Always chaining the refs leads to problems when the childFactory\n                // wraps the child. The child ref callback gets called twice with the\n                // wrapper and the child. So we only need to chain the ref if the\n                // factoryChild is not different from child.\n                if (factoryChild === child && isCallbackRef) {\n                    ref = (0, _chainFunction2.default)(child.ref, ref);\n                }\n                // You may need to apply reactive updates to a child as it is leaving.\n                // The normal React way to do it won't work since the child will have\n                // already been removed. In case you need this behavior you can provide\n                // a childFactory function to wrap every child, even the ones that are\n                // leaving.\n                childrenToRender.push(_react2.default.cloneElement(factoryChild, {\n                    key: key,\n                    ref: ref\n                }));\n            }\n        };\n        for(var key in this.state.children){\n            _loop(key);\n        }\n        // Do not forward TransitionGroup props to primitive DOM nodes\n        var props = _extends({}, this.props);\n        delete props.transitionLeave;\n        delete props.transitionName;\n        delete props.transitionAppear;\n        delete props.transitionEnter;\n        delete props.childFactory;\n        delete props.transitionLeaveTimeout;\n        delete props.transitionEnterTimeout;\n        delete props.transitionAppearTimeout;\n        delete props.component;\n        return _react2.default.createElement(this.props.component, props, childrenToRender);\n    };\n    return TransitionGroup;\n}(_react2.default.Component);\nTransitionGroup.displayName = \"TransitionGroup\";\nTransitionGroup.propTypes =  true ? propTypes : 0;\nTransitionGroup.defaultProps = defaultProps;\nexports[\"default\"] = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);\nmodule.exports = exports[\"default\"];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/TransitionGroup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar _CSSTransitionGroup = __webpack_require__(/*! ./CSSTransitionGroup */ \"(ssr)/./node_modules/@bkrem/react-transition-group/CSSTransitionGroup.js\");\nvar _CSSTransitionGroup2 = _interopRequireDefault(_CSSTransitionGroup);\nvar _TransitionGroup = __webpack_require__(/*! ./TransitionGroup */ \"(ssr)/./node_modules/@bkrem/react-transition-group/TransitionGroup.js\");\nvar _TransitionGroup2 = _interopRequireDefault(_TransitionGroup);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nmodule.exports = {\n    TransitionGroup: _TransitionGroup2.default,\n    CSSTransitionGroup: _CSSTransitionGroup2.default\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJrcmVtL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxzQkFBc0JDLG1CQUFPQSxDQUFDO0FBRWxDLElBQUlDLHVCQUF1QkMsdUJBQXVCSDtBQUVsRCxJQUFJSSxtQkFBbUJILG1CQUFPQSxDQUFDO0FBRS9CLElBQUlJLG9CQUFvQkYsdUJBQXVCQztBQUUvQyxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGRyxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsaUJBQWlCTixrQkFBa0JHLE9BQU87SUFDMUNJLG9CQUFvQlYscUJBQXFCTSxPQUFPO0FBQ2xEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZG9nLWJyZWVkZXItYXBwLy4vbm9kZV9tb2R1bGVzL0Bia3JlbS9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2luZGV4LmpzPzk2MDUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX0NTU1RyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoJy4vQ1NTVHJhbnNpdGlvbkdyb3VwJyk7XG5cbnZhciBfQ1NTVHJhbnNpdGlvbkdyb3VwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NTU1RyYW5zaXRpb25Hcm91cCk7XG5cbnZhciBfVHJhbnNpdGlvbkdyb3VwID0gcmVxdWlyZSgnLi9UcmFuc2l0aW9uR3JvdXAnKTtcblxudmFyIF9UcmFuc2l0aW9uR3JvdXAyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVHJhbnNpdGlvbkdyb3VwKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFRyYW5zaXRpb25Hcm91cDogX1RyYW5zaXRpb25Hcm91cDIuZGVmYXVsdCxcbiAgQ1NTVHJhbnNpdGlvbkdyb3VwOiBfQ1NTVHJhbnNpdGlvbkdyb3VwMi5kZWZhdWx0XG59OyJdLCJuYW1lcyI6WyJfQ1NTVHJhbnNpdGlvbkdyb3VwIiwicmVxdWlyZSIsIl9DU1NUcmFuc2l0aW9uR3JvdXAyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9UcmFuc2l0aW9uR3JvdXAiLCJfVHJhbnNpdGlvbkdyb3VwMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiZXhwb3J0cyIsIlRyYW5zaXRpb25Hcm91cCIsIkNTU1RyYW5zaXRpb25Hcm91cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/utils/ChildMapping.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/utils/ChildMapping.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.getChildMapping = getChildMapping;\nexports.mergeChildMappings = mergeChildMappings;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/**\n * Given `this.props.children`, return an object mapping key to child.\n *\n * @param {*} children `this.props.children`\n * @return {object} Mapping of key to child\n */ function getChildMapping(children) {\n    if (!children) {\n        return children;\n    }\n    var result = {};\n    _react.Children.map(children, function(child) {\n        return child;\n    }).forEach(function(child) {\n        result[child.key] = child;\n    });\n    return result;\n}\n/**\n * When you're adding or removing children some may be added or removed in the\n * same render pass. We want to show *both* since we want to simultaneously\n * animate elements in and out. This function takes a previous set of keys\n * and a new set of keys and merges them with its best guess of the correct\n * ordering. In the future we may expose some of the utilities in\n * ReactMultiChild to make this easy, but for now React itself does not\n * directly have this concept of the union of prevChildren and nextChildren\n * so we implement it here.\n *\n * @param {object} prev prev children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @param {object} next next children as returned from\n * `ReactTransitionChildMapping.getChildMapping()`.\n * @return {object} a key set that contains all keys in `prev` and all keys\n * in `next` in a reasonable order.\n */ function mergeChildMappings(prev, next) {\n    prev = prev || {};\n    next = next || {};\n    function getValueForKey(key) {\n        if (next.hasOwnProperty(key)) {\n            return next[key];\n        }\n        return prev[key];\n    }\n    // For each key of `next`, the list of keys to insert before that key in\n    // the combined list\n    var nextKeysPending = {};\n    var pendingKeys = [];\n    for(var prevKey in prev){\n        if (next.hasOwnProperty(prevKey)) {\n            if (pendingKeys.length) {\n                nextKeysPending[prevKey] = pendingKeys;\n                pendingKeys = [];\n            }\n        } else {\n            pendingKeys.push(prevKey);\n        }\n    }\n    var i = void 0;\n    var childMapping = {};\n    for(var nextKey in next){\n        if (nextKeysPending.hasOwnProperty(nextKey)) {\n            for(i = 0; i < nextKeysPending[nextKey].length; i++){\n                var pendingNextKey = nextKeysPending[nextKey][i];\n                childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n            }\n        }\n        childMapping[nextKey] = getValueForKey(nextKey);\n    }\n    // Finally, add the keys which didn't appear before any key in `next`\n    for(i = 0; i < pendingKeys.length; i++){\n        childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n    }\n    return childMapping;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJrcmVtL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLGtCQUFrQixHQUFHO0FBQ3JCQSx1QkFBdUIsR0FBR0U7QUFDMUJGLDBCQUEwQixHQUFHRztBQUU3QixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQjs7Ozs7Q0FLQyxHQUNELFNBQVNILGdCQUFnQkksUUFBUTtJQUMvQixJQUFJLENBQUNBLFVBQVU7UUFDYixPQUFPQTtJQUNUO0lBQ0EsSUFBSUMsU0FBUyxDQUFDO0lBQ2RILE9BQU9JLFFBQVEsQ0FBQ0MsR0FBRyxDQUFDSCxVQUFVLFNBQVVJLEtBQUs7UUFDM0MsT0FBT0E7SUFDVCxHQUFHQyxPQUFPLENBQUMsU0FBVUQsS0FBSztRQUN4QkgsTUFBTSxDQUFDRyxNQUFNRSxHQUFHLENBQUMsR0FBR0Y7SUFDdEI7SUFDQSxPQUFPSDtBQUNUO0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxTQUFTSixtQkFBbUJVLElBQUksRUFBRUMsSUFBSTtJQUNwQ0QsT0FBT0EsUUFBUSxDQUFDO0lBQ2hCQyxPQUFPQSxRQUFRLENBQUM7SUFFaEIsU0FBU0MsZUFBZUgsR0FBRztRQUN6QixJQUFJRSxLQUFLRSxjQUFjLENBQUNKLE1BQU07WUFDNUIsT0FBT0UsSUFBSSxDQUFDRixJQUFJO1FBQ2xCO1FBRUEsT0FBT0MsSUFBSSxDQUFDRCxJQUFJO0lBQ2xCO0lBRUEsd0VBQXdFO0lBQ3hFLG9CQUFvQjtJQUNwQixJQUFJSyxrQkFBa0IsQ0FBQztJQUV2QixJQUFJQyxjQUFjLEVBQUU7SUFDcEIsSUFBSyxJQUFJQyxXQUFXTixLQUFNO1FBQ3hCLElBQUlDLEtBQUtFLGNBQWMsQ0FBQ0csVUFBVTtZQUNoQyxJQUFJRCxZQUFZRSxNQUFNLEVBQUU7Z0JBQ3RCSCxlQUFlLENBQUNFLFFBQVEsR0FBR0Q7Z0JBQzNCQSxjQUFjLEVBQUU7WUFDbEI7UUFDRixPQUFPO1lBQ0xBLFlBQVlHLElBQUksQ0FBQ0Y7UUFDbkI7SUFDRjtJQUVBLElBQUlHLElBQUksS0FBSztJQUNiLElBQUlDLGVBQWUsQ0FBQztJQUNwQixJQUFLLElBQUlDLFdBQVdWLEtBQU07UUFDeEIsSUFBSUcsZ0JBQWdCRCxjQUFjLENBQUNRLFVBQVU7WUFDM0MsSUFBS0YsSUFBSSxHQUFHQSxJQUFJTCxlQUFlLENBQUNPLFFBQVEsQ0FBQ0osTUFBTSxFQUFFRSxJQUFLO2dCQUNwRCxJQUFJRyxpQkFBaUJSLGVBQWUsQ0FBQ08sUUFBUSxDQUFDRixFQUFFO2dCQUNoREMsWUFBWSxDQUFDTixlQUFlLENBQUNPLFFBQVEsQ0FBQ0YsRUFBRSxDQUFDLEdBQUdQLGVBQWVVO1lBQzdEO1FBQ0Y7UUFDQUYsWUFBWSxDQUFDQyxRQUFRLEdBQUdULGVBQWVTO0lBQ3pDO0lBRUEscUVBQXFFO0lBQ3JFLElBQUtGLElBQUksR0FBR0EsSUFBSUosWUFBWUUsTUFBTSxFQUFFRSxJQUFLO1FBQ3ZDQyxZQUFZLENBQUNMLFdBQVcsQ0FBQ0ksRUFBRSxDQUFDLEdBQUdQLGVBQWVHLFdBQVcsQ0FBQ0ksRUFBRTtJQUM5RDtJQUVBLE9BQU9DO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb2ctYnJlZWRlci1hcHAvLi9ub2RlX21vZHVsZXMvQGJrcmVtL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvQ2hpbGRNYXBwaW5nLmpzPzAzNGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5nZXRDaGlsZE1hcHBpbmcgPSBnZXRDaGlsZE1hcHBpbmc7XG5leHBvcnRzLm1lcmdlQ2hpbGRNYXBwaW5ncyA9IG1lcmdlQ2hpbGRNYXBwaW5ncztcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbi8qKlxuICogR2l2ZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gLCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcga2V5IHRvIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Kn0gY2hpbGRyZW4gYHRoaXMucHJvcHMuY2hpbGRyZW5gXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcHBpbmcgb2Yga2V5IHRvIGNoaWxkXG4gKi9cbmZ1bmN0aW9uIGdldENoaWxkTWFwcGluZyhjaGlsZHJlbikge1xuICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgX3JlYWN0LkNoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJlc3VsdFtjaGlsZC5rZXldID0gY2hpbGQ7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFdoZW4geW91J3JlIGFkZGluZyBvciByZW1vdmluZyBjaGlsZHJlbiBzb21lIG1heSBiZSBhZGRlZCBvciByZW1vdmVkIGluIHRoZVxuICogc2FtZSByZW5kZXIgcGFzcy4gV2Ugd2FudCB0byBzaG93ICpib3RoKiBzaW5jZSB3ZSB3YW50IHRvIHNpbXVsdGFuZW91c2x5XG4gKiBhbmltYXRlIGVsZW1lbnRzIGluIGFuZCBvdXQuIFRoaXMgZnVuY3Rpb24gdGFrZXMgYSBwcmV2aW91cyBzZXQgb2Yga2V5c1xuICogYW5kIGEgbmV3IHNldCBvZiBrZXlzIGFuZCBtZXJnZXMgdGhlbSB3aXRoIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBjb3JyZWN0XG4gKiBvcmRlcmluZy4gSW4gdGhlIGZ1dHVyZSB3ZSBtYXkgZXhwb3NlIHNvbWUgb2YgdGhlIHV0aWxpdGllcyBpblxuICogUmVhY3RNdWx0aUNoaWxkIHRvIG1ha2UgdGhpcyBlYXN5LCBidXQgZm9yIG5vdyBSZWFjdCBpdHNlbGYgZG9lcyBub3RcbiAqIGRpcmVjdGx5IGhhdmUgdGhpcyBjb25jZXB0IG9mIHRoZSB1bmlvbiBvZiBwcmV2Q2hpbGRyZW4gYW5kIG5leHRDaGlsZHJlblxuICogc28gd2UgaW1wbGVtZW50IGl0IGhlcmUuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IHByZXYgcHJldiBjaGlsZHJlbiBhcyByZXR1cm5lZCBmcm9tXG4gKiBgUmVhY3RUcmFuc2l0aW9uQ2hpbGRNYXBwaW5nLmdldENoaWxkTWFwcGluZygpYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0IG5leHQgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcmV0dXJuIHtvYmplY3R9IGEga2V5IHNldCB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIGluIGBwcmV2YCBhbmQgYWxsIGtleXNcbiAqIGluIGBuZXh0YCBpbiBhIHJlYXNvbmFibGUgb3JkZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2LCBuZXh0KSB7XG4gIHByZXYgPSBwcmV2IHx8IHt9O1xuICBuZXh0ID0gbmV4dCB8fCB7fTtcblxuICBmdW5jdGlvbiBnZXRWYWx1ZUZvcktleShrZXkpIHtcbiAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gbmV4dFtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwcmV2W2tleV07XG4gIH1cblxuICAvLyBGb3IgZWFjaCBrZXkgb2YgYG5leHRgLCB0aGUgbGlzdCBvZiBrZXlzIHRvIGluc2VydCBiZWZvcmUgdGhhdCBrZXkgaW5cbiAgLy8gdGhlIGNvbWJpbmVkIGxpc3RcbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IHt9O1xuXG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuICBmb3IgKHZhciBwcmV2S2V5IGluIHByZXYpIHtcbiAgICBpZiAobmV4dC5oYXNPd25Qcm9wZXJ0eShwcmV2S2V5KSkge1xuICAgICAgaWYgKHBlbmRpbmdLZXlzLmxlbmd0aCkge1xuICAgICAgICBuZXh0S2V5c1BlbmRpbmdbcHJldktleV0gPSBwZW5kaW5nS2V5cztcbiAgICAgICAgcGVuZGluZ0tleXMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ0tleXMucHVzaChwcmV2S2V5KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaSA9IHZvaWQgMDtcbiAgdmFyIGNoaWxkTWFwcGluZyA9IHt9O1xuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNoaWxkTWFwcGluZ1tuZXh0S2V5XSA9IGdldFZhbHVlRm9yS2V5KG5leHRLZXkpO1xuICB9XG5cbiAgLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG4gIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGNoaWxkTWFwcGluZ1twZW5kaW5nS2V5c1tpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nS2V5c1tpXSk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRNYXBwaW5nO1xufSJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsImdldENoaWxkTWFwcGluZyIsIm1lcmdlQ2hpbGRNYXBwaW5ncyIsIl9yZWFjdCIsInJlcXVpcmUiLCJjaGlsZHJlbiIsInJlc3VsdCIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJmb3JFYWNoIiwia2V5IiwicHJldiIsIm5leHQiLCJnZXRWYWx1ZUZvcktleSIsImhhc093blByb3BlcnR5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwibGVuZ3RoIiwicHVzaCIsImkiLCJjaGlsZE1hcHBpbmciLCJuZXh0S2V5IiwicGVuZGluZ05leHRLZXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/utils/ChildMapping.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@bkrem/react-transition-group/utils/PropTypes.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@bkrem/react-transition-group/utils/PropTypes.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.__esModule = true;\nexports.nameShape = undefined;\nexports.transitionTimeout = transitionTimeout;\nvar _react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = __webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\");\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction transitionTimeout(transitionType) {\n    var timeoutPropName = \"transition\" + transitionType + \"Timeout\";\n    var enabledPropName = \"transition\" + transitionType;\n    return function(props) {\n        // If the transition is enabled\n        if (props[enabledPropName]) {\n            // If no timeout duration is provided\n            if (props[timeoutPropName] == null) {\n                return new Error(timeoutPropName + \" wasn't supplied to CSSTransitionGroup: \" + \"this can cause unreliable animations and won't be supported in \" + \"a future version of React. See \" + \"https://fb.me/react-animation-transition-group-timeout for more \" + \"information.\");\n            // If the duration isn't a number\n            } else if (typeof props[timeoutPropName] !== \"number\") {\n                return new Error(timeoutPropName + \" must be a number (in milliseconds)\");\n            }\n        }\n        return null;\n    };\n}\nvar nameShape = exports.nameShape = _propTypes2.default.oneOfType([\n    _propTypes2.default.string,\n    _propTypes2.default.shape({\n        enter: _propTypes2.default.string,\n        leave: _propTypes2.default.string,\n        active: _propTypes2.default.string\n    }),\n    _propTypes2.default.shape({\n        enter: _propTypes2.default.string,\n        enterActive: _propTypes2.default.string,\n        leave: _propTypes2.default.string,\n        leaveActive: _propTypes2.default.string,\n        appear: _propTypes2.default.string,\n        appearActive: _propTypes2.default.string\n    })\n]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJrcmVtL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLGtCQUFrQixHQUFHO0FBQ3JCQSxpQkFBaUIsR0FBR0c7QUFDcEJILHlCQUF5QixHQUFHSTtBQUU1QixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQixJQUFJQyxVQUFVQyx1QkFBdUJIO0FBRXJDLElBQUlJLGFBQWFILG1CQUFPQSxDQUFDO0FBRXpCLElBQUlJLGNBQWNGLHVCQUF1QkM7QUFFekMsU0FBU0QsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSVYsVUFBVSxHQUFHVSxNQUFNO1FBQUVDLFNBQVNEO0lBQUk7QUFBRztBQUU5RixTQUFTUCxrQkFBa0JTLGNBQWM7SUFDdkMsSUFBSUMsa0JBQWtCLGVBQWVELGlCQUFpQjtJQUN0RCxJQUFJRSxrQkFBa0IsZUFBZUY7SUFFckMsT0FBTyxTQUFVRyxLQUFLO1FBQ3BCLCtCQUErQjtRQUMvQixJQUFJQSxLQUFLLENBQUNELGdCQUFnQixFQUFFO1lBQzFCLHFDQUFxQztZQUNyQyxJQUFJQyxLQUFLLENBQUNGLGdCQUFnQixJQUFJLE1BQU07Z0JBQ2xDLE9BQU8sSUFBSUcsTUFBTUgsa0JBQWtCLDZDQUE4QyxvRUFBcUUsb0NBQW9DLHFFQUFxRTtZQUUvUCxpQ0FBaUM7WUFDbkMsT0FBTyxJQUFJLE9BQU9FLEtBQUssQ0FBQ0YsZ0JBQWdCLEtBQUssVUFBVTtnQkFDckQsT0FBTyxJQUFJRyxNQUFNSCxrQkFBa0I7WUFDckM7UUFDRjtRQUVBLE9BQU87SUFDVDtBQUNGO0FBRUEsSUFBSVosWUFBWUYsaUJBQWlCLEdBQUdVLFlBQVlFLE9BQU8sQ0FBQ00sU0FBUyxDQUFDO0lBQUNSLFlBQVlFLE9BQU8sQ0FBQ08sTUFBTTtJQUFFVCxZQUFZRSxPQUFPLENBQUNRLEtBQUssQ0FBQztRQUN2SEMsT0FBT1gsWUFBWUUsT0FBTyxDQUFDTyxNQUFNO1FBQ2pDRyxPQUFPWixZQUFZRSxPQUFPLENBQUNPLE1BQU07UUFDakNJLFFBQVFiLFlBQVlFLE9BQU8sQ0FBQ08sTUFBTTtJQUNwQztJQUFJVCxZQUFZRSxPQUFPLENBQUNRLEtBQUssQ0FBQztRQUM1QkMsT0FBT1gsWUFBWUUsT0FBTyxDQUFDTyxNQUFNO1FBQ2pDSyxhQUFhZCxZQUFZRSxPQUFPLENBQUNPLE1BQU07UUFDdkNHLE9BQU9aLFlBQVlFLE9BQU8sQ0FBQ08sTUFBTTtRQUNqQ00sYUFBYWYsWUFBWUUsT0FBTyxDQUFDTyxNQUFNO1FBQ3ZDTyxRQUFRaEIsWUFBWUUsT0FBTyxDQUFDTyxNQUFNO1FBQ2xDUSxjQUFjakIsWUFBWUUsT0FBTyxDQUFDTyxNQUFNO0lBQzFDO0NBQUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kb2ctYnJlZWRlci1hcHAvLi9ub2RlX21vZHVsZXMvQGJrcmVtL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzP2QwMzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5uYW1lU2hhcGUgPSB1bmRlZmluZWQ7XG5leHBvcnRzLnRyYW5zaXRpb25UaW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25UaW1lb3V0KHRyYW5zaXRpb25UeXBlKSB7XG4gIHZhciB0aW1lb3V0UHJvcE5hbWUgPSAndHJhbnNpdGlvbicgKyB0cmFuc2l0aW9uVHlwZSArICdUaW1lb3V0JztcbiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlO1xuXG4gIHJldHVybiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAvLyBJZiB0aGUgdHJhbnNpdGlvbiBpcyBlbmFibGVkXG4gICAgaWYgKHByb3BzW2VuYWJsZWRQcm9wTmFtZV0pIHtcbiAgICAgIC8vIElmIG5vIHRpbWVvdXQgZHVyYXRpb24gaXMgcHJvdmlkZWRcbiAgICAgIGlmIChwcm9wc1t0aW1lb3V0UHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcih0aW1lb3V0UHJvcE5hbWUgKyAnIHdhc25cXCd0IHN1cHBsaWVkIHRvIENTU1RyYW5zaXRpb25Hcm91cDogJyArICd0aGlzIGNhbiBjYXVzZSB1bnJlbGlhYmxlIGFuaW1hdGlvbnMgYW5kIHdvblxcJ3QgYmUgc3VwcG9ydGVkIGluICcgKyAnYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hbmltYXRpb24tdHJhbnNpdGlvbi1ncm91cC10aW1lb3V0IGZvciBtb3JlICcgKyAnaW5mb3JtYXRpb24uJyk7XG5cbiAgICAgICAgLy8gSWYgdGhlIGR1cmF0aW9uIGlzbid0IGEgbnVtYmVyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wc1t0aW1lb3V0UHJvcE5hbWVdICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKHRpbWVvdXRQcm9wTmFtZSArICcgbXVzdCBiZSBhIG51bWJlciAoaW4gbWlsbGlzZWNvbmRzKScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG52YXIgbmFtZVNoYXBlID0gZXhwb3J0cy5uYW1lU2hhcGUgPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGxlYXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgYWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ1xufSksIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoe1xuICBlbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGVudGVyQWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgbGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBsZWF2ZUFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFwcGVhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGFwcGVhckFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmdcbn0pXSk7Il0sIm5hbWVzIjpbImV4cG9ydHMiLCJfX2VzTW9kdWxlIiwibmFtZVNoYXBlIiwidW5kZWZpbmVkIiwidHJhbnNpdGlvblRpbWVvdXQiLCJfcmVhY3QiLCJyZXF1aXJlIiwiX3JlYWN0MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfcHJvcFR5cGVzIiwiX3Byb3BUeXBlczIiLCJvYmoiLCJkZWZhdWx0IiwidHJhbnNpdGlvblR5cGUiLCJ0aW1lb3V0UHJvcE5hbWUiLCJlbmFibGVkUHJvcE5hbWUiLCJwcm9wcyIsIkVycm9yIiwib25lT2ZUeXBlIiwic3RyaW5nIiwic2hhcGUiLCJlbnRlciIsImxlYXZlIiwiYWN0aXZlIiwiZW50ZXJBY3RpdmUiLCJsZWF2ZUFjdGl2ZSIsImFwcGVhciIsImFwcGVhckFjdGl2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@bkrem/react-transition-group/utils/PropTypes.js\n");

/***/ })

};
;